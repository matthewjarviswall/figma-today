function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';

import { countTypesTags, wrapTypesToLazyChild, wrapTypesToNoScript } from '../lib/wrap';

import DefaultWrapper from './DefaultWrapper';
import Observer from '@researchgate/react-intersection-observer';

var LazyGroup = function (_React$PureComponent) {
    _inherits(LazyGroup, _React$PureComponent);

    function LazyGroup(props) {
        _classCallCheck(this, LazyGroup);

        var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

        _this.loadedImgTags = 0;
        _this.state = { imgTagCount: null, loadedAt: null, viewportAt: null };

        _this.handleViewport = _this.handleViewport.bind(_this);
        _this.handleImgLoaded = _this.handleImgLoaded.bind(_this);
        return _this;
    }

    LazyGroup.prototype.handleImgLoaded = function handleImgLoaded() {
        this.loadedImgTags++;

        if (this.loadedImgTags === this.state.imgTagCount) {
            this.loadedImgTags = 0;
            this.setState({ imgTagCount: null, loadedAt: Date.now() }, this.props.onLoad);
        }
    };

    LazyGroup.prototype.handleViewport = function handleViewport(event, unobserve) {
        var _props = this.props,
            children = _props.children,
            childrenToWrap = _props.childrenToWrap,
            onLoad = _props.onLoad,
            onViewport = _props.onViewport,
            visible = _props.visible;


        if (!event.isIntersecting || !visible) {
            return;
        }

        if (onViewport) {
            onViewport(event);
        }

        if (event.defaultPrevented) {
            return;
        }

        unobserve();

        var imgTagCount = countTypesTags(childrenToWrap, children) || null;
        this.loadedImgTags = 0;
        var viewportAt = Date.now();
        this.setState({ imgTagCount: imgTagCount, loadedAt: !imgTagCount ? viewportAt : null, viewportAt: viewportAt }, !imgTagCount ? onLoad : null);
    };

    LazyGroup.prototype.render = function render() {
        var _props2 = this.props,
            children = _props2.children,
            childrenToWrap = _props2.childrenToWrap,
            childWrapper = _props2.childWrapper,
            clientOnly = _props2.clientOnly,
            component = _props2.component,
            cushion = _props2.cushion,
            ref = _props2.forwardedRef,
            ltIE9 = _props2.ltIE9,
            onLoad = _props2.onLoad,
            onViewport = _props2.onViewport,
            threshold = _props2.threshold,
            viewport = _props2.viewport,
            visible = _props2.visible,
            rest = _objectWithoutProperties(_props2, ['children', 'childrenToWrap', 'childWrapper', 'clientOnly', 'component', 'cushion', 'forwardedRef', 'ltIE9', 'onLoad', 'onViewport', 'threshold', 'viewport', 'visible']);

        var props = Object.assign({ ref: ref }, rest);

        return React.createElement(
            Observer,
            { onChange: this.handleViewport, root: viewport, rootMargin: cushion, threshold: threshold },
            React.createElement(component, props,
            // swap render once element is visible in viewport
            clientOnly || this.state.viewportAt ? wrapTypesToLazyChild(childrenToWrap, children, childWrapper, this.handleImgLoaded, this.state.viewportAt != null) : wrapTypesToNoScript(childrenToWrap, children, ltIE9, childWrapper))
        );
    };

    return LazyGroup;
}(React.PureComponent);

LazyGroup.defaultProps = {
    childrenToWrap: ['iframe', 'img'],
    childWrapper: DefaultWrapper,
    clientOnly: false,
    component: 'div',
    ltIE9: false,
    visible: true
};

process.env.NODE_ENV !== "production" ? LazyGroup.propTypes = {
    clientOnly: PropTypes.bool,
    children: PropTypes.node,
    childrenToWrap: PropTypes.arrayOf(PropTypes.any),
    childWrapper: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),
    component: PropTypes.any,
    cushion: PropTypes.string,
    forwardedRef: PropTypes.any,
    ltIE9: PropTypes.bool,
    onLoad: PropTypes.func,
    onViewport: PropTypes.func,
    threshold: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),
    viewport: PropTypes.oneOfType([PropTypes.string].concat(typeof HTMLElement === 'undefined' ? [] : PropTypes.instanceOf(HTMLElement))),
    visible: PropTypes.bool

    // eslint-disable-next-line react/display-name,react/no-multi-comp
} : void 0;export default React.forwardRef(function (props, ref) {
    return React.createElement(LazyGroup, Object.assign({}, props, { forwardedRef: ref }));
});
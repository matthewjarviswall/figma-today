function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';

function getProps(children, prop) {
    if (!children || !children.props) return null;

    var _children$props = children.props,
        onError = _children$props.onError,
        onLoad = _children$props.onLoad,
        childProps = _objectWithoutProperties(_children$props, ['onError', 'onLoad']);

    switch (prop) {
        case 'onError':
            return onError;
        case 'onLoad':
            return onLoad;
        default:
            return childProps;
    }
}

var LazyChild = function (_React$PureComponent) {
    _inherits(LazyChild, _React$PureComponent);

    function LazyChild(props) {
        _classCallCheck(this, LazyChild);

        var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

        _this.state = { isFailed: false, isLoaded: false };

        _this.handleError = _this.handleError.bind(_this);
        _this.handleLoad = _this.handleLoad.bind(_this);
        return _this;
    }

    LazyChild.prototype.componentDidMount = function componentDidMount() {
        this.setState({ childProps: getProps(this.props.children) });
    };

    LazyChild.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (prevProps.children === this.props.children) {
            return;
        }

        this.setState({ childProps: getProps(this.props.children) });
    };

    LazyChild.prototype.handleError = function handleError(event) {
        this.setState({ isFailed: true }, this.props.callback);

        var onError = getProps(this.props.children, 'onError');
        if (onError) onError(event);
    };

    LazyChild.prototype.handleLoad = function handleLoad(event) {
        this.setState({ isLoaded: true }, this.props.callback);

        var onLoad = getProps(this.props.children, 'onLoad');
        if (onLoad) onLoad(event);
    };

    LazyChild.prototype.render = function render() {
        var _props = this.props,
            callback = _props.callback,
            children = _props.children,
            wrapper = _props.wrapper,
            props = _objectWithoutProperties(_props, ['callback', 'children', 'wrapper']);

        var child = children ? React.Children.only(children) : null;

        return React.createElement(wrapper, Object.assign({}, props, this.state), child && !this.state.isFailed && !this.state.isLoaded ? React.cloneElement(child, { onError: this.handleError, onLoad: this.handleLoad }) : child);
    };

    return LazyChild;
}(React.PureComponent);

process.env.NODE_ENV !== "production" ? LazyChild.propTypes = {
    callback: PropTypes.func,
    children: PropTypes.node,
    wrapper: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired
} : void 0;

export default LazyChild;